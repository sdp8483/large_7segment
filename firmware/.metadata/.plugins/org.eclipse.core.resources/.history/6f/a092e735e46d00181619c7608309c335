#include <msp430.h>
#include <stdint.h>

// Segment pin defines
#define SEG_A   BIT0
#define SEG_B   BIT1
#define SEG_C   BIT2
#define SEG_D   BIT3
#define SEG_E   BIT4
#define SEG_F   BIT5
#define SEG_G   BIT6
#define SEG_DP  BIT7
#define ALLSEG  SEG_A + SEG_B + SEG_C + SEG_D + SEG_E + SEG_F + SEG_G + SEG_DP

// Numeral segment defines
#define ZERO    SEG_A + SEG_B + SEG_C + SEG_D + SEG_E + SEG_F
#define ONE     SEG_B + SEG_C
#define TWO     SEG_A + SEG_B + SEG_G + SEG_E + SEG_D
#define THREE   SEG_A + SEG_B + SEG_C + SEG_D + SEG_G
#define FOUR    SEG_B + SEG_C + SEG_G + SEG_F
#define FIVE    SEG_A + SEG_F + SEG_G + SEG_C + SEG_D
#define SIX     SEG_A + SEG_F + SEG_G + SEG_C + SEG_D + SEG_E
#define SEVEN   SEG_A + SEG_B + SEG_C
#define EIGHT   SEG_A + SEG_B + SEG_C + SEG_D + SEG_E + SEG_F + SEG_G
#define NINE    SEG_A + SEG_B + SEG_C + SEG_D + SEG_F + SEG_G
#define HEX_A   SEG_A + SEG_B + SEG_C + SEG_E + SEG_F + SEG_G
#define HEX_B   SEG_C + SEG_D + SEG_E + SEG_F + SEG_G
#define HEX_C   SEG_A + SEG_D + SEG_E + SEG_F
#define HEX_D   SEG_B + SEG_C + SEG_D + SEG_E + SEG_G
#define HEX_E   SEG_A + SEG_D + SEG_E + SEG_F + SEG_G
#define HEX_F   SEG_A + SEG_E + SEG_F + SEG_G

void WDT_waitAsec(void);                        // use watchdog timer as 1 second interval, sleep during this time

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	                // stop watchdog timer

	SFRRPCR |= SYSRSTRE | SYSRSTUP;             // Enable internal pullup resistor on reset pin

	P1OUT |= ALLSEG;                            // preload segment pins high (high = off)
	P1DIR |= ALLSEG;                            // segment pins are output pins

	PM5CTL0 &= ~LOCKLPM5;                       // Disable the GPIO power-on default high-impedance mode to activate
                                                // previously configured port settings

	for(;;)                                     // loop forever!
	{

	    P1OUT &= ~ ZERO;                        // pull segments low
	    WDT_waitAsec();
	    P1OUT |= ALLSEG;

        P1OUT &= ~ ONE;                        // pull segments low
        WDT_waitAsec();
        P1OUT |= ALLSEG;

        P1OUT &= ~ TWO;                        // pull segments low
        WDT_waitAsec();
        P1OUT |= ALLSEG;

        P1OUT &= ~ THREE;                        // pull segments low
        WDT_waitAsec();
        P1OUT |= ALLSEG;
	}
}

void WDT_waitAsec()
{
    // WDT as 1s interval counter
    SFRIFG1 &= ~WDTIFG;
    WDTCTL = WDTPW + WDTSSEL_1 + WDTTMSEL + WDTCNTCL + WDTIS_4;
    SFRIE1 |= WDTIE;
    __bis_SR_register(LPM3_bits);               // Enter LPM3
}

// WDT interrupt service routine
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = WDT_VECTOR
__interrupt void WDT_ISR(void)
#else
#error Compiler not supported!
#endif
{
        WDTCTL = WDTPW + WDTHOLD;               // Stop WDT
        __bic_SR_register_on_exit(LPM3_bits);   // Exit LPM3
}
